/*
 * Chris Jacobs (cjacobs2)
 * RandomSkyline
 * Feb 28, 2011
 * CS111B - TTh 11 AM - 1 PM
 * Assignment: K3 and K4
 * This program creates a random skyline
 * with building and windows...
 * there are some stars and a moon...
 * did you find Waldo?
 */

import javax.swing.*;

public class RandomSkyline {
  public static void main(String[] args) {
    JFrame frame = new JFrame("Skyline"); // create jframe
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.getContentPane().add(new BuildingPanel()); // add crap to it
    frame.pack(); // pack it up - pack it in
    frame.setVisible(true); // let me begin
  }
}


/*
 * Chris Jacobs (cjacobs2)
 * RandomSkyline
 * Feb 28, 2011
 * CS111B - TTh 11 AM - 1 PM
 * Assignment: K3 and K4
 */

import javax.swing.*;
import java.awt.*;
import java.util.Random;

public class BuildingPanel extends JPanel {
  private static final long serialVersionUID = 1L; // asked for by eclipse
  private Random gene = new Random(); // random object for random values
  private final int WIDTH = 1580; // width of app
  private final int HEIGHT = 800; // height of app
  private int maxBuildBuff = 21; // max val added to min for buffer size
  private int minBuildBuff = 0; // buffer minimum size
  private int maxBuildWidth = 71; // max val added to min for build width
  private int minBuildWidth = 30; // min build width
  // max val added to min building height
  private int maxBuildHeight = (int)(HEIGHT*.6);
  private int minBuildHeight = 20; // min value of building height
  private int maxBuildMult = 10; // max building mult added to min
  private int minBuildMult = 1; // min building mult
  private int starMult = 3; // quick access var for num of stars
  
  public BuildingPanel() {
    // BuildingPanel constructor
    setPreferredSize(new Dimension(WIDTH, HEIGHT));
    setBackground(Color.black);
  }
  
  private int[][] buildBuildings() {
    // creates values to use for the buildings
    // gives about 50:50 odds that 1st building is on the left edge
    int first = gene.nextBoolean() ? 0 : 1;
    int tot = WIDTH; // used to stay in assigned space
    int cur = 0; // keep track of how many times while runs
    // create build array to store/pass values
    int[][] build = new int[(int)(WIDTH/(minBuildBuff+minBuildWidth))+1][5];
    // while there is room to add a building... add one
    while (tot>0) {
      build[cur][0] = (gene.nextInt(maxBuildBuff)+minBuildBuff)*first; // Buffer
      build[cur][1] = gene.nextInt(maxBuildWidth)+minBuildWidth; // Width
      build[cur][2] = gene.nextInt(maxBuildHeight)+minBuildHeight; // Height
      build[cur][3] = gene.nextInt(maxBuildMult)+minBuildMult; // Mult
      tot -= build[cur][0]+build[cur][1]; // update tot
      first = 1; // we're now done with you...
      cur++; // update cur
    }
    build[0][4] = cur; // pack index size in a convenient spot
    return build; // send it back
  }
  
  public void miniSky(int x, int y, int wide, int tall, Color color,
                      Graphics page) {
    // logo thingy
    page.setColor(color);
    page.fillRect(x+wide*0/5+2, y+tall*3/6, wide/5-4, tall*3/6);
    page.fillRect(x+wide*1/5+2, y+tall*4/6, wide/5-4, tall*2/6);
    page.fillRect(x+wide*2/5+2, y+tall*1/6, wide/5-4, tall*5/6);
    page.fillRect(x+wide*3/5+2, y+tall*5/6, wide/5-4, tall*1/6);
    page.fillRect(x+wide*4/5+2, y+tall*2/6, wide/5-4, tall*4/6);
  }
  
  public void finishDraw(Graphics page) {
    // finishing touches
    page.setColor(Color.black);
    page.fillRect(0, HEIGHT-50, WIDTH, HEIGHT); // bottom of window
    page.setColor(Color.gray);
    page.fillRect(WIDTH/2-50, HEIGHT-40, 100, 30); // name plate
    page.setColor(new Color(191, 0, 0));
    page.drawString("Chris' Skyline", WIDTH/2-40, HEIGHT-20); // title
    // left miniSky
    miniSky((WIDTH/2-25)/2-25, HEIGHT-40, 50, 30, new Color(191, 0, 0), page);
    // right miniSky
    miniSky(((WIDTH/2+25)+WIDTH)/2-25, HEIGHT-40, 50, 30, Color.gray, page);
  }
  
  public void paintComponent(Graphics page) {
    super.paintComponent(page);
    // add sky
    Sky sky = new Sky(WIDTH, HEIGHT, (gene.nextInt(500)+501)*starMult);
    // draw sky
    sky.draw(page); // draw sky
    int[][] valArray = buildBuildings(); // fetch random values for builds
    Building[] build = new Building[valArray[0][4]]; // array size
    int xCur = 0; // start x cursor at 0
    for(int i = 0; i<valArray[0][4]; i++) { // valArray[0][4] is array size
      xCur += valArray[i][0]; // add buffer to x cursor
      if(xCur<WIDTH) { // only render if on page
        // create building
        build[i] =
                   new Building(xCur, HEIGHT-50-valArray[i][2], valArray[i][1],
                                valArray[i][2], valArray[i][3]);
        // pass random values down to the windows
        build[i].windows.setWinHei(gene.nextInt(8)+3);
        build[i].windows.setWinWid(gene.nextInt(5)+2);
        build[i].windows.setXBuf(gene.nextInt(3)+3);
        build[i].windows.setYBuf(gene.nextInt(3)+4);
        // randomly pick a rule to render the bricks with
        int[] ruleList = {30, 90, 110};
        int which = gene.nextInt(3);
        build[i].bricks.setRule(ruleList[which]);
        xCur += valArray[i][1]; // add width to x cursor
        if(build[0].getX()==0) { // if 1st build is at x=0
          if(gene.nextBoolean()) { // 50:50 shot to use mode 2 if x=0
            build[0].windows.rendMode = 2; // special rendering mode on
          }
        }
        build[i].draw(page); // draw fresh building
      }
    }
    finishDraw(page); // stamp of approval the bottom
  }
}


/*
 * Chris Jacobs (cjacobs2)
 * RandomSkyline
 * Feb 28, 2011
 * CS111B - TTh 11 AM - 1 PM
 * Assignment: K3 and K4
 */

import java.awt.*;

public class Building {
  // class building for object building, made of Brick and Windows
  private int x; // x coord
  private int y; // y coord
  private int width; // width of building
  private int height; // height of building
  public Brick bricks; // brick component of building
  public Windows windows; // window component of building
  
  public Building(int theX, int theY, int wide, int tall, int multi) {
    // building constructor
    x = theX;
    y = theY;
    width = wide;
    height = tall;
    // create the building's bricks
    bricks = new Brick(x, y, width, height, multi);
    // create the buildings windows
    windows = new Windows(x, y, width, height);
  }
  
  public void draw(Graphics page) {
    // draw sub-parts
    bricks.draw(page);
    windows.draw(page);
  }
  
  public void setX(int newX) {
    // x setter
    bricks.setX(newX);
    windows.setX(newX);
    x = newX;
  }
  
  public void setY(int newY) {
    // y setter
    bricks.setY(newY);
    windows.setY(newY);
    y = newY;
  }
  
  public void setWidth(int newWidth) {
    // width setter
    bricks.setWidth(newWidth);
    windows.setWidth(newWidth);
    width = newWidth;
  }
  
  public void setHeight(int newHeight) {
    // height setter
    bricks.setHeight(newHeight);
    windows.setHeight(newHeight);
    height = newHeight;
  }
  
  public int getX() {
    // x getter
    return x;
  }
  
  public int getY() {
    // y getter
    return y;
  }
  
  public int getWidth() {
    // width getter
    return width;
  }
  
  public int getHeight() {
    // height getter
    return height;
  }
}


/*
 * Chris Jacobs (cjacobs2)
 * RandomSkyline
 * Feb 28, 2011
 * CS111B - TTh 11 AM - 1 PM
 * Assignment: K3 and K4
 */

import java.awt.Color;
import java.lang.Math;
import java.awt.Graphics;
import java.util.Random;

public class Brick {
  private int x; // x coord
  private int y; // y coord
  private int xMax; // x boundary of object brick
  private int yMax; // y boundary of object brick
  private int nWid; // number of windows across to render
  private int nHei; // number of windows along to render
  private int width; // width of object brick
  private int height; // height of object brick
  private int mult; // mult of object brick
  private int rule = 30; // cellular automation rule used to fill array
  private boolean[][] pixelArray; // array to contain the brick pattern
  private Color colorT; // color corresponding with a true value in the array
  private Color colorF; // color corresponding with a false value in the array
  private Random gene = new Random(); // random object for fetching random vals
  
  public Brick(int theX, int theY, int wide, int tall, int scale) {
    // brick constructor
    x = theX;
    xMax = theX+wide;
    y = theY;
    yMax = theY+tall;
    height = tall;
    width = wide;
    mult = scale;
    // generate random true color
    colorT = new Color(gene.nextInt(256), gene.nextInt(256), gene.nextInt(256));
    // generate random false color
    colorF = new Color(gene.nextInt(256), gene.nextInt(256), gene.nextInt(256));
  }
  
  private void fillArray() {
    // populates pixelArray with true/false values that
    // correspond with the rule number
    // first row randomly seeded
    nHei = height/mult+1; // reduce unnecessary work
    nWid = width/mult+1; // reduce unnecessary work
    pixelArray = new boolean[nHei][nWid]; // give pixelArray dimension
    for(int i = 0; i<nWid; i++) { // start width loop to populate first row
      pixelArray[0][i] = gene.nextBoolean(); // random value
    }
    // following rows populated using rule's value when
    // passed to eval() to dictate the next row
    // which dictates which?
    // case a |- case b -| case c
    // XX000X XXX000 00XXX0 X000XX
    // ^00000 0^0000 000^00 00000^
    // 000000 000000 000000 000000
    for(int i = 1; i<nHei; i++) { // start height loop
      for(int j = 0; j<nWid; j++) { // start width loop
        boolean a; // above left
        boolean b; // above
        boolean c; // above right
        if(j==0) { // case a
          a = pixelArray[i-1][nWid-1];
          b = pixelArray[i-1][0];
          c = pixelArray[i-1][1];
        } else if(j==nWid-1) { // case c
          a = pixelArray[i-1][j-1];
          b = pixelArray[i-1][j];
          c = pixelArray[i-1][0];
        } else { // case b
          a = pixelArray[i-1][j-1];
          b = pixelArray[i-1][j];
          c = pixelArray[i-1][j+1];
        }
        // convert to oct val
        int d = 0;
        d += a ? 4 : 0;
        d += b ? 2 : 0;
        d += c ? 1 : 0;
        // use eval(d) to dictate new boolean val
        pixelArray[i][j] = eval(d);
      }
    }
  }
  
  private boolean eval(int oct) {
    // receives val from to check against cellular
    // automation rule defined by int rule
    // create rule book to check against
    boolean[] ruleBook = new boolean[8];
    // create helper to encode ruleBook's rules
    int helper = rule;
    // loop from 7 to 1
    // idk why the rules switch orientation, but they do...
    // rule 30 (000XXXX0) should be rule 225 (XXX0000X)
    // i could have gone with 255-rule, but meh.
    for(int i = 7; i>0; i--) {
      // decode. assign accordingly
      if(rule-Math.pow(2, i)<0) {
        ruleBook[i] = false;
        helper = helper-(int)(Math.pow(2, i));
      } else {
        ruleBook[i] = true;
      }
    }
    return ruleBook[oct]; // using the oct-th rule of the ruleBook
  }
  
  public void draw(Graphics page) {
    // draw method
    // populate array first
    fillArray();
    for(int i = 0; i<nHei; i++) { // start height loop
      for(int j = 0; j<nWid; j++) { // nest width loop
        if(pixelArray[i][j]) { // check pixelArray to tell if colorT or colorF
          page.setColor(colorT);
        } else {
          page.setColor(colorF);
        }
        // draw the window
        // use Math.min to keep the object in it's assigned range
        page.fillRect(x+j*mult, y+i*mult, Math.min(mult, xMax-(x+j*mult)),
                      Math.min(mult, yMax-(y+i*mult)));
      }
    }
  }
  
  public void setX(int newX) {
    // x setter - recalc xMax
    xMax = newX+width;
    x = newX;
  }
  
  public void setY(int newY) {
    // y setter - recalc yMax
    yMax = newY+height;
    y = newY;
  }
  
  public void setWidth(int newWidth) {
    // width setter - recalc xMax
    xMax = x+newWidth;
    width = newWidth;
  }
  
  public void setHeight(int newHeight) {
    // height setter - recalc yMax
    yMax = y+newHeight;
    height = newHeight;
  }
  
  public void setMult(int newMult) {
    // mult setter -> all calcs made using mult
    // are done during render
    mult = newMult;
  }
  
  public void setRule(int newRule) {
    // rule setter
    rule = newRule;
  }
  
  public void setColorT(Color newCol) {
    // colorT setter
    colorT = newCol;
  }
  
  public void setColorF(Color newCol) {
    // colorF setter
    colorF = newCol;
  }
  
  public int getX() {
    // x getter
    return x;
  }
  
  public int getY() {
    // y getter
    return y;
  }
  
  public int getWidth() {
    // width getter
    return width;
  }
  
  public int getHeight() {
    // height getter
    return height;
  }
  
  public Color getColorT() {
    // colorT getter
    return colorT;
  }
  
  public Color getColorF() {
    // colorF getter
    return colorF;
  }
  
  public int getMult() {
    // mult getter
    return mult;
  }
  
  public int getRule() {
    // rule getter
    return rule;
  }
}


/*
 * Chris Jacobs (cjacobs2)
 * RandomSkyline
 * Feb 28, 2011
 * CS111B - TTh 11 AM - 1 PM
 * Assignment: K3 and K4
 */

import java.awt.*;
import java.util.Random;

public class Windows {
  private int x; // x coord
  private int y; // y coord
  private int xBuf = 4; // x buffer between windows
  private int yBuf = 4; // y buffer between windows
  private int winWid = 5; // window width
  private int winHei = 8; // window height
  private int height; // height of object
  private int width; // width of object
  private int numWide = 1; // number of windows across
  private int numTall = 1; // number of windows along
  private int xOff = 1; // x offset for first window in row
  private int yOff = 1; // y offset for first window in col
  private boolean[][] winArray; // array of t/f to for window color
  private Color colorT = new Color(255, 255, 255); // light on color
  private Color colorF = new Color(0, 0, 0); // light off color
  private Random gene = new Random(); // random object
  public int rendMode = 1; // used to account for special situation
  
  public Windows(int theX, int theY, int wide, int tall) {
    // Windows constructor
    x = theX;
    y = theY;
    height = tall;
    width = wide;
  }
  
  public void draw(Graphics page) {
    // draw method
    // build array first
    buildArray();
    for(int i = 0; i<numTall; i++) { // start height loop
      for(int j = 0; j<numWide; j++) { // nest width loop
        page.setColor(colorF);
        if(winArray[i][j]) { // figure on or off
          page.setColor(colorT);
        }
        // left edge window and special case
        if(width-xOff-j*xBuf-(j+1)*winWid<0&&rendMode==2) {
          page
              .fillRect(0, (y+yOff+i*(yBuf+winHei)), winWid
                                                     -Math.abs(width-xOff-j
                                                               *xBuf-(j+1)
                                                               *winWid), winHei)
;
          // special case
        } else if(width-xOff-j*xBuf-(j+1)*winWid>0&&rendMode==2) {
          page.fillRect(Math.max(0, width-xOff-j*xBuf-(j+1)*winWid),
                        (y+yOff+i*(yBuf+winHei)), winWid, winHei);
          // normal case
        } else {
          
          page.fillRect(Math.max(x+xOff+j*(xBuf+winWid), 0), y+yOff+i
                                                             *(yBuf+winHei),
                        winWid, winHei);
        }
      }
    }
  }
  
  private void buildArray() {
    // creates usable array
    // figure out how many windows you can fit across
    for(int i = 0; i<width; i++) {
      if(i*xBuf+(i+1)*winWid+2>width) {
        numWide = i+(rendMode-1); // an extra one if special case
        break;
      }
    }
    // figure out how many windows you can fit along
    for(int i = 0; i<height; i++) {
      if(i*yBuf+(i+1)*winHei+2>height) {
        numTall = i;
        break;
      }
    }
    // if it isn't a special case set xOff to:
    if(rendMode==1) {
      xOff = (width-(numWide*winWid+(numWide-1)*xBuf))/2;
    } else { // if it is use this:
      xOff = (xBuf+1)/2;
    }
    // all cases use this yOff
    yOff = (height-(numTall*winHei+(numTall-1)*yBuf))/2;
    // give the array it's dimensions
    winArray = new boolean[numTall][numWide];
    for(int i = 0; i<numTall; i++) { // create along loop
      for(int j = 0; j<numWide; j++) { // nest across loop
        int togInt = gene.nextInt(3); // one in 3 chance light is on
        boolean togBool = togInt==0 ? true : false;
        winArray[i][j] = togBool; // assign it to the array
      }
    }
  }
  
  public void setX(int newX) {
    // x setter
    x = newX;
  }
  
  public void setY(int newY) {
    // x setter
    y = newY;
  }
  
  public void setXBuf(int newBuf) {
    // xBuf setter
    xBuf = newBuf;
  }
  
  public void setYBuf(int newBuf) {
    // yBuf setter
    yBuf = newBuf;
  }
  
  public void setWinHei(int newHeight) {
    // winHei setter
    winHei = newHeight;
  }
  
  public void setWinWid(int newWidth) {
    // winWid setter
    winWid = newWidth;
  }
  
  public void setHeight(int newHeight) {
    // height setter
    height = newHeight;
  }
  
  public void setWidth(int newWidth) {
    // width setter
    width = newWidth;
  }
  
  public void setColorT(Color shade) {
    // colorT setter
    colorT = shade;
  }
  
  public void setColorF(Color shade) {
    // colorF setter
    colorF = shade;
  }
  
  public int getX() {
    // x getter
    return x;
  }
  
  public int getY() {
    // y getter
    return y;
  }
  
  public int getXBuf() {
    // xBuf getter
    return xBuf;
  }
  
  public int getYBuf() {
    // yBuf getter
    return yBuf;
  }
  
  public int getWinHei() {
    // winHei getter
    return winHei;
  }
  
  public int getWinWid() {
    // winWid getter
    return winWid;
  }
  
  public int getHeight() {
    // height getter
    return height;
  }
  
  public int getWidth() {
    // width getter
    return width;
  }
  
  public Color getColorT() {
    // colorT getter
    return colorT;
  }
  
  public Color getColorF() {
    // colorF getter
    return colorF;
  }
}


/*
 * Chris Jacobs (cjacobs2)
 * RandomSkyline
 * Feb 28, 2011
 * CS111B - TTh 11 AM - 1 PM
 * Assignment: K3 and K4
 */

import java.awt.*;
import java.util.Random;

public class Sky {
  // sky object
  private int width; // app width
  private int height; // app height
  private int numStars; // number of stars to render
  private Random gene = new Random(); // random obj
  
  public Sky(int wide, int tall, int stars) {
    // Sky constructor
    width = wide;
    height = tall;
    numStars = stars;
  }
  
  public void draw(Graphics page) {
    // paint sunset
    for(int i = 0; i<height; i++) {
      page.setColor(new Color(Math.min(i/2, 192), Math.min(i/3, 127),
                              Math.min(i, 255)));
      page.drawLine(0, i, width, i);
    }
    // paint stars
    // this is split to give more stars to higher locations
    page.setColor(Color.white);
    for(int i = 0; i<(int)(numStars/2); i++) {
      page.fillRect(gene.nextInt(width), (int)(gene.nextInt(height/5)), 1, 1);
    }
    for(int i = 0; i<(int)(numStars/3); i++) {
      page.fillRect(gene.nextInt(width),
                    (int)(gene.nextInt(height/5)+height/5), 1, 1);
    }
    for(int i = 0; i<(int)(numStars/6); i++) {
      page.fillRect(gene.nextInt(width),
                    (int)(gene.nextInt(height/5)+height*2/5), 1, 1);
    }
    // paint moon
    page.setColor(new Color(240, 240, 240));
    page.fillOval(gene.nextInt(width-55)+5, gene.nextInt(height/5)+5, 50, 50);
  }
  
  public void setHeight(int newHeight) {
    // height setter
    height = newHeight;
  }
  
  public void setWidth(int newWidth) {
    // width setter
    width = newWidth;
  }
  
  public void setNumStars(int newNumStars) {
    // numStars setter
    numStars = newNumStars;
  }
  
  public int getHeight() {
    // height getter
    return height;
  }
  
  public int getWidth() {
    // width getter
    return width;
  }
  
  public int getNumStars() {
    // numStars getter
    return numStars;
  }
}
